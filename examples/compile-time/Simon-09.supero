root = f1 0

(+) = plusInteger'2
(*) = timesInteger'2

f1 x = let y = (x + 1) * 2 in f2 y ++ f2 (y + 1)
f2 x = let y = (x + 1) * 2 in f3 y ++ f3 (y + 1)
f3 x = let y = (x + 1) * 2 in f4 y ++ f4 (y + 1)
f4 x = let y = (x + 1) * 2 in f5 y ++ f5 (y + 1)
f5 x = let y = (x + 1) * 2 in f6 y ++ f6 (y + 1)
f6 x = let y = (x + 1) * 2 in f7 y ++ f7 (y + 1)
f7 x = let y = (x + 1) * 2 in f8 y ++ f8 (y + 1)
f8 x = let y = (x + 1) * 2 in f9 y ++ f9 (y + 1)
f9 x = let y = (x + 1) * 2 in f10 y ++ f10 (y + 1)
f10 x = [x + 1]

(++) xs ys = case xs of
    [] -> ys
    (z:zs) -> z : (zs ++ ys)
